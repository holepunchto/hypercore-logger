// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @logger/stats
const encoding0 = {
  preencode (state, m) {
    c.uint.preencode(state, m.cpus)
    c.uint.preencode(state, m.cpu)
    c.uint.preencode(state, m.cpuThread)
    c.uint.preencode(state, m.cpuDelay)
    c.uint.preencode(state, m.rss)
    c.uint.preencode(state, m.heapUsed)
    c.uint.preencode(state, m.heapTotal)
    c.uint.preencode(state, m.external)
  },
  encode (state, m) {
    c.uint.encode(state, m.cpus)
    c.uint.encode(state, m.cpu)
    c.uint.encode(state, m.cpuThread)
    c.uint.encode(state, m.cpuDelay)
    c.uint.encode(state, m.rss)
    c.uint.encode(state, m.heapUsed)
    c.uint.encode(state, m.heapTotal)
    c.uint.encode(state, m.external)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.uint.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.uint.decode(state)
    const r5 = c.uint.decode(state)
    const r6 = c.uint.decode(state)
    const r7 = c.uint.decode(state)

    return {
      cpus: r0,
      cpu: r1,
      cpuThread: r2,
      cpuDelay: r3,
      rss: r4,
      heapUsed: r5,
      heapTotal: r6,
      external: r7
    }
  }
}

// @logger/entry.stats
const encoding1_1 = c.frame(encoding0)

// @logger/entry
const encoding1 = {
  preencode (state, m) {
    c.uint.preencode(state, m.timestamp)
    state.end++ // max flag is 4 so always one byte

    if (m.stats) encoding1_1.preencode(state, m.stats)
    if (m.subsystem) c.string.preencode(state, m.subsystem)
    if (m.message) c.string.preencode(state, m.message)
  },
  encode (state, m) {
    const flags =
      (m.stats ? 1 : 0) |
      (m.subsystem ? 2 : 0) |
      (m.message ? 4 : 0)

    c.uint.encode(state, m.timestamp)
    c.uint.encode(state, flags)

    if (m.stats) encoding1_1.encode(state, m.stats)
    if (m.subsystem) c.string.encode(state, m.subsystem)
    if (m.message) c.string.encode(state, m.message)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      timestamp: r0,
      stats: (flags & 1) !== 0 ? encoding1_1.decode(state) : null,
      subsystem: (flags & 2) !== 0 ? c.string.decode(state) : null,
      message: (flags & 4) !== 0 ? c.string.decode(state) : null
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@logger/stats': return encoding0
    case '@logger/entry': return encoding1
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
